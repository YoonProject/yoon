{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is the YoonMVP API server.  You can find \nout more about Swagger at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
    "version" : "1.0.0",
    "title" : "Yoon Api",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "administration@yoon.online"
    },
    "license" : {
      "name" : "MIT",
      "url" : "https://opensource.org/licenses/MIT"
    }
  },
  "tags" : [ {
    "name" : "upload",
    "description" : "Everything about your uploads",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "flag",
    "description" : "Access to uploadflag claims"
  }, {
    "name" : "user",
    "description" : "Operations about user",
    "externalDocs" : {
      "description" : "Find out more about our flag",
      "url" : "http://swagger.io"
    }
  } ],
  "paths" : {
    "/upload" : {
      "post" : {
        "tags" : [ "upload" ],
        "summary" : "Add a new upload to the flag",
        "operationId" : "addupload",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "upload object that needs to be added to the flag",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/upload"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "uploadflag_auth" : [ "write:uploads", "read:uploads" ]
        } ]
      },
      "put" : {
        "tags" : [ "upload" ],
        "summary" : "Update an existing upload",
        "operationId" : "updateupload",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "upload object that needs to be added to the flag",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/upload"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "upload not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "uploadflag_auth" : [ "write:uploads", "read:uploads" ]
        } ]
      }
    },
    "/upload/findByStatus" : {
      "get" : {
        "tags" : [ "upload" ],
        "summary" : "Finds uploads by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "finduploadsByStatus",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "available", "pending", "sold" ],
            "default" : "available"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/upload"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "uploadflag_auth" : [ "write:uploads", "read:uploads" ]
        } ]
      }
    },
    "/upload/findByTags" : {
      "get" : {
        "tags" : [ "upload" ],
        "summary" : "Finds uploads by tags",
        "description" : "Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.",
        "operationId" : "finduploadsByTags",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "Tags to filter by",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/upload"
              }
            }
          },
          "400" : {
            "description" : "Invalid tag value"
          }
        },
        "security" : [ {
          "uploadflag_auth" : [ "write:uploads", "read:uploads" ]
        } ]
      }
    },
    "/upload/{uploadId}" : {
      "get" : {
        "tags" : [ "upload" ],
        "summary" : "Find upload by ID",
        "description" : "Returns a single upload",
        "operationId" : "getuploadById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "uploadId",
          "in" : "path",
          "description" : "ID of upload to return",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/upload"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "upload not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "upload" ],
        "summary" : "Updates a upload in the flag with form data",
        "operationId" : "updateuploadWithForm",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "uploadId",
          "in" : "path",
          "description" : "ID of upload that needs to be updated",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "name",
          "in" : "formData",
          "description" : "Updated name of the upload",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "formData",
          "description" : "Updated status of the upload",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "uploadflag_auth" : [ "write:uploads", "read:uploads" ]
        } ]
      },
      "delete" : {
        "tags" : [ "upload" ],
        "summary" : "Deletes a upload",
        "operationId" : "deleteupload",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "uploadId",
          "in" : "path",
          "description" : "upload id to delete",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "upload not found"
          }
        },
        "security" : [ {
          "uploadflag_auth" : [ "write:uploads", "read:uploads" ]
        } ]
      }
    },
    "/upload/{uploadId}/uploadImage" : {
      "post" : {
        "tags" : [ "upload" ],
        "summary" : "uploads an image",
        "operationId" : "uploadFile",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "uploadId",
          "in" : "path",
          "description" : "ID of upload to update",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "additionalMetadata",
          "in" : "formData",
          "description" : "Additional data to pass to server",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "file to upload",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        },
        "security" : [ {
          "uploadflag_auth" : [ "write:uploads", "read:uploads" ]
        } ]
      }
    },
    "/flag/claims" : {
      "get" : {
        "tags" : [ "flag" ],
        "summary" : "Returns upload inventories by status",
        "description" : "Returns a map of status codes to quantities",
        "operationId" : "getclaims",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string",
                "format" : "int32"
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/flag/claim" : {
      "post" : {
        "tags" : [ "flag" ],
        "summary" : "Place an claim for a upload",
        "operationId" : "placeclaim",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "claim placed for purchasing the upload",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/claim"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/claim"
            }
          },
          "400" : {
            "description" : "Invalid claim"
          }
        }
      }
    },
    "/flag/claim/{claimId}" : {
      "get" : {
        "tags" : [ "flag" ],
        "summary" : "Find purchase claim by ID",
        "description" : "For valid response try string IDs with value >= 1 and <= 10.\\ \\ Other values will generated exceptions",
        "operationId" : "getclaimById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "claimId",
          "in" : "path",
          "description" : "ID of upload that needs to be fetched",
          "required" : true,
          "type" : "string",
          "maximum" : 10.0,
          "minimum" : 1.0,
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/claim"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "claim not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "flag" ],
        "summary" : "Delete purchase claim by ID",
        "description" : "For valid response try string IDs with positive string value.\\ \\ Negative or non-string values will generate API errors",
        "operationId" : "deleteclaim",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "claimId",
          "in" : "path",
          "description" : "ID of the claim that needs to be deleted",
          "required" : true,
          "type" : "string",
          "minimum" : 1.0,
          "format" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "claim not found"
          }
        }
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Created user object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "X-Rate-Limit" : {
                "type" : "string",
                "format" : "int32",
                "description" : "calls per hour allowed by the user"
              },
              "X-Expires-After" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "date in UTC when token expires"
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Updated user object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "uploadflag_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "https://yoon.online/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:uploads" : "modify uploads in your account",
        "read:uploads" : "read your uploads"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "claim" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "string"
        },
        "uploadId" : {
          "type" : "string",
          "format" : "string"
        },
        "quantity" : {
          "type" : "string",
          "format" : "int32"
        },
        "shipDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "status" : {
          "type" : "string",
          "description" : "claim Status",
          "enum" : [ "placed", "approved", "delivered" ]
        },
        "complete" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "claim"
      }
    },
    "Category" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "Category"
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "string"
        },
        "username" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "userStatus" : {
          "type" : "string",
          "format" : "int32",
          "description" : "User Status"
        }
      },
      "xml" : {
        "name" : "User"
      }
    },
    "Tag" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "Tag"
      }
    },
    "upload" : {
      "type" : "object",
      "required" : [ "name", "photoUrls" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "string"
        },
        "category" : {
          "$ref" : "#/definitions/Category"
        },
        "name" : {
          "type" : "string",
          "example" : [ "image hash" ]
        },
        "photoUrls" : {
          "type" : "array",
          "xml" : {
            "name" : "photoUrl",
            "wrapped" : true
          },
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "type" : "array",
          "xml" : {
            "name" : "tag",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "upload status in the flag",
          "enum" : [ "available", "pending", "sold" ]
        }
      },
      "xml" : {
        "name" : "upload"
      }
    },
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/Yoon/Api/1.0.0",
  "schemes" : [ "https", "http" ]
}