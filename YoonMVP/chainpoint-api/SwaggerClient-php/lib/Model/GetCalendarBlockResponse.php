<?php
/**
 * GetCalendarBlockResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Chainpoint Node
 *
 * Documentation for the Chainpoint Node API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@chainpoint.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 1.0.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetCalendarBlockResponse Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCalendarBlockResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetCalendarBlockResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'time' => 'int',
        'version' => 'int',
        'stack_id' => 'string',
        'type' => 'string',
        'data_id' => 'string',
        'data_val' => 'string',
        'prev_hash' => 'string',
        'hash' => 'string',
        'sig' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'time' => null,
        'version' => null,
        'stack_id' => null,
        'type' => null,
        'data_id' => null,
        'data_val' => null,
        'prev_hash' => null,
        'hash' => null,
        'sig' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'time' => 'time',
        'version' => 'version',
        'stack_id' => 'stackId',
        'type' => 'type',
        'data_id' => 'dataId',
        'data_val' => 'dataVal',
        'prev_hash' => 'prevHash',
        'hash' => 'hash',
        'sig' => 'sig'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'time' => 'setTime',
        'version' => 'setVersion',
        'stack_id' => 'setStackId',
        'type' => 'setType',
        'data_id' => 'setDataId',
        'data_val' => 'setDataVal',
        'prev_hash' => 'setPrevHash',
        'hash' => 'setHash',
        'sig' => 'setSig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'time' => 'getTime',
        'version' => 'getVersion',
        'stack_id' => 'getStackId',
        'type' => 'getType',
        'data_id' => 'getDataId',
        'data_val' => 'getDataVal',
        'prev_hash' => 'getPrevHash',
        'hash' => 'getHash',
        'sig' => 'getSig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['stack_id'] = isset($data['stack_id']) ? $data['stack_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['data_id'] = isset($data['data_id']) ? $data['data_id'] : null;
        $this->container['data_val'] = isset($data['data_val']) ? $data['data_val'] : null;
        $this->container['prev_hash'] = isset($data['prev_hash']) ? $data['prev_hash'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['sig'] = isset($data['sig']) ? $data['sig'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets stack_id
     *
     * @return string
     */
    public function getStackId()
    {
        return $this->container['stack_id'];
    }

    /**
     * Sets stack_id
     *
     * @param string $stack_id stack_id
     *
     * @return $this
     */
    public function setStackId($stack_id)
    {
        $this->container['stack_id'] = $stack_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets data_id
     *
     * @return string
     */
    public function getDataId()
    {
        return $this->container['data_id'];
    }

    /**
     * Sets data_id
     *
     * @param string $data_id data_id
     *
     * @return $this
     */
    public function setDataId($data_id)
    {
        $this->container['data_id'] = $data_id;

        return $this;
    }

    /**
     * Gets data_val
     *
     * @return string
     */
    public function getDataVal()
    {
        return $this->container['data_val'];
    }

    /**
     * Sets data_val
     *
     * @param string $data_val data_val
     *
     * @return $this
     */
    public function setDataVal($data_val)
    {
        $this->container['data_val'] = $data_val;

        return $this;
    }

    /**
     * Gets prev_hash
     *
     * @return string
     */
    public function getPrevHash()
    {
        return $this->container['prev_hash'];
    }

    /**
     * Sets prev_hash
     *
     * @param string $prev_hash prev_hash
     *
     * @return $this
     */
    public function setPrevHash($prev_hash)
    {
        $this->container['prev_hash'] = $prev_hash;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash hash
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets sig
     *
     * @return string
     */
    public function getSig()
    {
        return $this->container['sig'];
    }

    /**
     * Sets sig
     *
     * @param string $sig sig
     *
     * @return $this
     */
    public function setSig($sig)
    {
        $this->container['sig'] = $sig;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
